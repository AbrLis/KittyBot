import json
import logging
import os
from datetime import datetime, timedelta, timezone

import requests
from dotenv import load_dotenv

load_dotenv()

API_WEATHER = os.getenv("API_WEATHER")
API_WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"
WEATHER_ICONS = {
    "01d": "‚òÄÔ∏è",
    "01n": "üåô",
    "02d": "‚õÖÔ∏è",
    "02n": "‚õÖÔ∏è",
    "03d": "‚òÅÔ∏è",
    "03n": "‚òÅÔ∏è",
    "04d": "‚òÅÔ∏è",
    "04n": "‚òÅÔ∏è",
    "09d": "üåß",
    "09n": "üåß",
    "10d": "üå¶",
    "10n": "üå¶",
    "11d": "‚õà",
    "11n": "‚õà",
    "13d": "‚ùÑÔ∏è",
    "13n": "‚ùÑÔ∏è",
    "50d": "üå´",
    "50n": "üå´",
}
WEATHER_DIRECTION = [
    22.5,
    "—Å–µ–≤–µ—Ä–Ω—ã–π",
    67.5,
    "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    112.5,
    "–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    157.5,
    "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
    202.5,
    "—é–∂–Ω—ã–π",
    247.5,
    "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    292.5,
    "–∑–∞–ø–∞–¥–Ω—ã–π",
    337.5,
    "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π",
    360,
    "—Å–µ–≤–µ—Ä–Ω—ã–π",
]
KNOTS_IN_METER_PER_SECOND = 1.94384449

logger_weather = logging.getLogger(__name__)
logger_weather.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(
    logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
)
logger_weather.addHandler(handler)

weater_path = "./file/weather_dict.json"
try:
    with open(weater_path, "r") as f:
        weather_dict = json.load(f)
except (FileNotFoundError, json.decoder.JSONDecodeError) as e:
    logger_weather.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–±—ã–ª –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {e}")
    weather_dict = {}


def get_wind_direction(degrees):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞"""
    for i in range(0, len(WEATHER_DIRECTION), 2):
        if degrees < WEATHER_DIRECTION[i]:
            return WEATHER_DIRECTION[i + 1]


def get_time(unixtime, tz) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS c —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    if not tz or not unixtime:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    tz = timezone(+timedelta(seconds=tz))
    return datetime.fromtimestamp(unixtime, tz).strftime("%H:%M:%S")


def parse_weather(result):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
    try:
        logger_weather.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≥–æ–¥—ã {result}")
        city = result.get("name")
        conditions = result.get("weather")[0].get("description")
        temperature = int(result.get("main").get("temp"))
        temp_feels_like = int(result.get("main").get("feels_like"))
        wind = round(result["wind"]["speed"] / KNOTS_IN_METER_PER_SECOND, 2)
        wind_gust = (
            round(
                (result.get("wind").get("gust") / KNOTS_IN_METER_PER_SECOND), 2
            )
            or "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        )
        wind_direction = get_wind_direction(result["wind"]["deg"])
        icon = WEATHER_ICONS.get(result["weather"][0]["icon"])
        visibility = result["visibility"] / 1000
        tz = result.get("timezone")
        date = get_time(result["dt"], tz)
        sunraise = get_time(result["sys"]["sunrise"], tz)
        sunset = get_time(result["sys"]["sunset"], tz)
        logger_weather.info("–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≥–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return (
            f"–î–∞–Ω–Ω—ã–µ –æ—Ç: {date}\n"
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {conditions} {icon}\n "
            f"üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temperature}¬∞C, "
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {temp_feels_like}¬∞C\n"
            f"–°—Ä–µ–¥–Ω—è—è –≤–∏–¥–∏–º–æ—Å—Ç—å: {visibility} –∫–º\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_direction}\n"
            f"üí® {wind} –º/—Å, –ø–æ—Ä—ã–≤–∞–º–∏ –¥–æ üí® {wind_gust} –º/—Å\n"
            f"üåÖ–í–æ—Å—Ö–æ–¥: {sunraise}, üåá–ó–∞–∫–∞—Ç: {sunset}"
        )
    except Exception as e:
        logger_weather.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞"


def get_weather(city) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ"""
    try:
        logger_weather.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
        result = requests.get(
            API_WEATHER_URL,
            params={
                "q": city,
                "units": "metric",
                "lang": "ru",
                "APPID": API_WEATHER,
            },
            timeout=5,
        ).json()
        if result.get("cod") != 200:
            logger_weather.info(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {result.get('message')}"
            )
            return result.get("message")
        logger_weather.info(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city} - –ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return parse_weather(result)
    except Exception as e:
        logger_weather.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω :("


def send_weather(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ"""
    chat = update.effective_chat
    city = update.message.text.replace("/weather", "")
    if city and isinstance(city, str):
        weather_dict[str(chat.id)] = city.strip()
        save_weather()
    if str(chat.id) in weather_dict:
        city = weather_dict.get(str(chat.id))
        message = get_weather(city)
    else:
        message = (
            "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å,\n"
            "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /weather city\n"
            "–Ø –∑–∞–ø–æ–º–Ω—é —Ç–µ–±—è –∏ –≤ –±—É–¥—É—â–µ–º —É–∂–µ –Ω–µ –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å ‚ù§\n"
        )
    context.bot.send_message(chat_id=chat.id, text=message)


def save_weather() -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        logger_weather.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        with open(weater_path, "w") as fi:
            json.dump(weather_dict, fi)
            logger_weather.info("–°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
    except (FileNotFoundError, json.decoder.JSONDecodeError) as er:
        logger_weather.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {er}")
